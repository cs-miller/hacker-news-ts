# source: https://hn-gql.now.sh
# timestamp: Mon Jun 04 2018 22:16:10 GMT-0400 (EDT)

type Comment implements Node {
  """The globally unique relay id"""
  id: ID!

  """The item's unique id"""
  hnId: String!

  """The user who posted the comment"""
  by: User!

  """The parent comment or story"""
  parent: Node

  """The comment's text"""
  text: String

  """Creation date of the comment, in Unix Time"""
  time: Int

  """Connection of child comments"""
  kids(
    """Returns the first n elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): CommentConnection

  """True if the comment is deleted"""
  deleted: Boolean

  """True if the comment is dead"""
  dead: Boolean
}

"""A connection to a list of items."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge"""
  node: Comment
}

enum FeedType {
  TOP
  NEW
  BEST
  ASK
  SHOW
  JOB
}

type Job implements Node {
  """The globally unique relay id"""
  id: ID!

  """The item's unique id"""
  hnId: String!

  """The user who created the item"""
  by: User!

  """The item's score"""
  score: Int

  """The job's text"""
  text: String

  """Creation date of the job, in Unix Time"""
  time: Int

  """The job's title"""
  title: String

  """The job's url"""
  url: String

  """True if the job is deleted"""
  deleted: Boolean

  """True if the job is dead"""
  dead: Boolean
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type NodeConnection {
  """A list of edges."""
  edges: [NodeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type NodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge"""
  node: Node
}

"""Information about pagination in a connection.'"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Poll implements Node {
  """The globally unique relay id"""
  id: ID!

  """The item's unique id"""
  hnId: String!

  """The user who created the item"""
  by: User!

  """The total comment count"""
  descendants: Int

  """The item's score"""
  score: Int

  """Creation date of the poll, in Unix Time"""
  time: Int

  """The poll's title"""
  title: String

  """The poll's text"""
  text: String

  """Connection of the poll's comments"""
  kids(
    """Returns the first n elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): CommentConnection

  """True if the item is deleted"""
  deleted: Boolean

  """True if the item is dead"""
  dead: Boolean

  """List of the poll's parts"""
  parts: [PollOpt]
}

type PollOpt implements Node {
  """The globally unique relay id"""
  id: ID!

  """The item's unique id"""
  hnId: String!

  """The user who created the item"""
  by: User!

  """The item's score"""
  score: Int

  """Creation date of the poll option, in Unix Time"""
  time: Int

  """The pollopt's text"""
  text: String

  """The parent poll"""
  parent: Poll

  """True if the item is deleted"""
  deleted: Boolean
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  nodeFromHnId(id: ID!, isUserId: Boolean): Node
  storyFeed(
    """Returns the first n elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    type: FeedType
  ): StoryConnection
}

type Story implements Node {
  """The globally unique relay id"""
  id: ID!

  """The item's unique id"""
  hnId: String!

  """The user who created the item"""
  by: User!

  """The total comment count"""
  descendants: Int

  """The story's score"""
  score: Int

  """Creation date of the story, in Unix Time"""
  time: Int

  """The title"""
  title: String

  """The url of the story"""
  url: String

  """The story text (HTML)"""
  text: String

  """Connection of the story's comments"""
  kids(
    """Returns the first n elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): CommentConnection

  """True if the story is deleted"""
  deleted: Boolean

  """True if the story is dead"""
  dead: Boolean
}

"""A connection to a list of items."""
type StoryConnection {
  """A list of edges."""
  edges: [StoryEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type StoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge"""
  node: Story
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type User implements Node {
  """The globally unique relay id"""
  id: ID!

  """The user's unique username, case sensative"""
  hnId: String!

  """
  Delay in minutes between a comment's creation and its visibility to other users
  """
  delay: Int

  """Creation date of the user, in Unix Time"""
  created: Int!

  """The uer's karma"""
  karma: Int!

  """The user's optional self-description (HTML)"""
  about: String

  """Connection of the user's stories, polls, and comments"""
  submitted(
    """Returns the first n elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): NodeConnection
}
